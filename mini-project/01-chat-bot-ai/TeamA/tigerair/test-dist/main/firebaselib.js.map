{"version":3,"sources":["../../test/main/firebaselib.js"],"names":["firebase","require","path","serviceAccount","join","__dirname","console","log","initializeApp","databaseURL","db","database","write","node","data","goOnline","resolve","reject","ref","set","error","exports","read","once","snapshot","val","finish","goOffline"],"mappings":"AAAA;;;;;;;;AACA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA;AACA,IAAIE,iBAAiBD,KAAKE,IAAL,CAAUC,SAAV,EAAqB,yCAArB,CAArB;;AAEAC,QAAQC,GAAR,CAAYF,SAAZ;AACAL,SAASQ,aAAT,CAAuB;AACnBL,kCADmB;AAEnB;AACAM,iBAAa;;AAHM,CAAvB;AAMA,IAAMC,KAAKV,SAASW,QAAT,EAAX;;AAEA,SAASC,KAAT,CAAeC,IAAf,EAAqBC,IAArB,EAA2B;AACvB;AACAJ,OAAGK,QAAH;AACA,WAAO,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,YAAIC,MAAMR,GAAGQ,GAAH,CAAOL,IAAP,CAAV;AACAK,YAAIC,GAAJ,CAAQL,IAAR,EAAc,UAACM,KAAD,EAAW;AACrB,gBAAIA,KAAJ,EAAW;AACP,uBAAOJ,QAAQI,KAAR,CAAP;AACH;AACDJ;AACH,SALD;AAMH,KARM,CAAP;AASH;AACDK,QAAQT,KAAR,GAAgBA,KAAhB;;AAEA,SAASU,IAAT,CAAcT,IAAd,EAAoB;AAChB;AACAH,OAAGK,QAAH;AACA,WAAO,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,YAAIC,MAAMR,GAAGQ,GAAH,CAAOL,IAAP,CAAV;AACAK,YAAIK,IAAJ,CAAS,OAAT,EAAkB,UAACC,QAAD,EAAc;AAC5B,gBAAIA,QAAJ,EAAc;AACV,uBAAOR,QAAQQ,SAASC,GAAT,EAAR,CAAP;AACH;AACDT,oBAAQ,IAAR;AACH,SALD;AAMH,KARM,CAAP;AASH;AACDK,QAAQC,IAAR,GAAeA,IAAf;;AAEA,SAASI,MAAT,GAAkB;AACd;AACAhB,OAAGiB,SAAH;AACH;AACDN,QAAQK,MAAR,GAAiBA,MAAjB","file":"firebaselib.js","sourcesContent":["\"use strict\";\nconst firebase = require('firebase');\nconst path = require('path');\n//let serviceAccount = path.join(__dirname, '../../crawler-36244f1a8268.json');\nlet serviceAccount = path.join(__dirname, '../../Minithon01TeamA-d3cfa7a081fd.json');\n\nconsole.log(__dirname);\nfirebase.initializeApp({\n    serviceAccount,\n    //databaseURL: 'https://crawler-48a40.firebaseio.com/'\n    databaseURL: 'https://minithon01teama.firebaseio.com/'\n\n});\nconst db = firebase.database();\n\nfunction write(node, data) {\n    //檢查連線，沒有連線時重新連線\n    db.goOnline();\n    return new Promise((resolve, reject) => {\n        let ref = db.ref(node);\n        ref.set(data, (error) => {\n            if (error) {\n                return resolve(error);\n            }\n            resolve();\n        });\n    });\n}\nexports.write = write;\n\nfunction read(node) {\n    //檢查連線，沒有連線時重新連線\n    db.goOnline();\n    return new Promise((resolve, reject) => {\n        let ref = db.ref(node);\n        ref.once('value', (snapshot) => {\n            if (snapshot) {\n                return resolve(snapshot.val());\n            }\n            resolve(null);\n        });\n    });\n}\nexports.read = read;\n\nfunction finish() {\n    //沒有中斷連線會咬住 process 請確保使用完畢後斷開連線\n    db.goOffline();\n}\nexports.finish = finish;\n"]}